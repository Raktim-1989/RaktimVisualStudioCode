###### LABELS & SELECTORS ########
LABELS: it is used to organise kubernetes objects
SELECTORS: It is used to retrieve kubernetes objects 

kubectl get pods --show-labels

//if we want to add a label to an existing pod 
kubectl label pods podname myname=raktim

//fetch pods having level
kubectl get pods --show-labels

//list pods matching a label
kubectl get pods -l env=development

//list pods without matching label env
kubectl get pods -l env!=development

//delete pod using labels
kubectl delete pod -l env=development


### LABELS-SELECTORS ###
Lables, do not provide uniqueness, we can provide same label to multiple objects.
Once labels are attached to objects, we would need filters to narrow down these and this is called label-SELECTORS
It can be set-based & equality-based

-set-based : kubectl get pods -l 'env in (development, testing)'
             kubectl get pods -l 'env notin (development, testing)'
             kubectl get pods -l class = pods, myname= raktim

*** EXAMPLE-OF-LABELS ***

kind: Pod
apiVersion: v1
metadata:
  name: delhipod
  labels:                                                   
    env: development
    class: pods
spec:
    containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Hello-Bhupinder; sleep 5 ; done"]

*** LAB-DEMO ***
D:\kubernetes\object>kubectl get pods -o wide
NAME       READY   STATUS    RESTARTS   AGE    IP           NODE       NOMINATED NODE   READINESS GATES
delhipod   1/1     Running   0          2m8s   172.17.0.5   minikube   <none>           <none>

D:\kubernetes\object>kubectl get pods --show-labels
NAME       READY   STATUS    RESTARTS   AGE     LABELS
delhipod   1/1     Running   0          2m22s   class=pods,env=development

D:\kubernetes\object>kubectl label pods delhipod myname=raktim
pod/delhipod labeled

D:\kubernetes\object>kubectl get pods --show-labels
NAME       READY   STATUS    RESTARTS   AGE     LABELS
delhipod   1/1     Running   0          3m59s   class=pods,env=development,myname=raktim

D:\kubernetes\object>kubectl get pods -l env=developmen
No resources found in default namespace.

D:\kubernetes\object>kubectl get pods -l env=development
NAME       READY   STATUS    RESTARTS   AGE
delhipod   1/1     Running   0          5m

D:\kubernetes\object>kubectl get pods -l env!=development
No resources found in default namespace.

D:\kubernetes\object>kubectl delete pod -l env=development
pod "delhipod" deleted

D:\kubernetes\object>

*** NODELABELS-SELECTOR ***
1. Create a node having a label i.e. t2-medium
2. Create a manifest as following and add a LABEL inside it to run the POD inside this particular node

Create a node as following --
kubectl label nodes ip-of-node hardware=t2-medium

NODE SELECTOR EXAMPLE

kind: Pod
apiVersion: v1
metadata:
  name: nodelabels
  labels:
    env: development
spec:
    containers:
       - name: c00
         image: ubuntu
         command: ["/bin/bash", "-c", "while true; do echo Hello-Bhupinder; sleep 5 ; done"]
    nodeSelector:                                         
       hardware: t2-medium

***END***

