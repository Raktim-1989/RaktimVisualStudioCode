KUBERNETES NETWORKING
### USECASE1: CONTAINERS UNDER SAME POD COMMUNICATING EACH OTHER ###
=================================
kind: Pod
apiVersion: v1
metadata:
  name: testpod
spec:
  containers:
    - name: c00
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo Hello-BRaktim; sleep 5 ; done"]
    - name: c01
      image: httpd
      ports:
       - containerPort: 80

Labs:
D:\kubernetes\object>kubectl apply -f podnetwork.yaml
pod/testpod created

D:\kubernetes\object>kubectl get pods -o wide
NAME      READY   STATUS              RESTARTS   AGE   IP       NODE       NOMINATED NODE   READINESS GATES
testpod   0/2     ContainerCreating   0          10s   <none>   minikube   <none>           <none>

D:\kubernetes\object>kubectl get pods -o wide
NAME      READY   STATUS              RESTARTS   AGE   IP       NODE       NOMINATED NODE   READINESS GATES
testpod   0/2     ContainerCreating   0          23s   <none>   minikube   <none>           <none>

D:\kubernetes\object>kubectl get pods -o wide
NAME      READY   STATUS    RESTARTS   AGE   IP           NODE       NOMINATED NODE   READINESS GATES
testpod   2/2     Running   0          66s   172.17.0.5   minikube   <none>           <none>

D:\kubernetes\object>kubectl exec testpod -it -c c00 /bin/bash
kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.
root@testpod:/# ls
bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@testpod:/# apt-get update && apt-get install curl

root@testpod:/# curl localhost:80
<html><body><h1>It works!</h1></body></html>

### USECASE2: CONTAINERS UNDER DIFFERENT PODS UNDER SAME NODES COMMUNICATING EACH OTHER ###

1. POD to POD communication on same worker node happens only by POD IP address
2. By default POD IP will nto be accessible outside the POD

## Services ##
ClusterIP

kind: Deployment
apiVersion: apps/v1
metadata:
   name: mydeployments
spec:
   replicas: 1
   selector:      # tells the controller which pods to watch/belong to
    matchLabels:
     name: deployment
   template:
     metadata:
       name: testpod1
       labels:
         name: deployment
     spec:
      containers:
        - name: c00
          image: httpd
          ports:
          - containerPort: 80

######### CLUSTERIP #################
kind: Service                             # Defines to create Service type Object
apiVersion: v1
metadata:
  name: demoservice
spec:
  ports:
    - port: 80                               # Containers port exposed
      targetPort: 80                     # Pods port
  selector:
    name: deployment                    # Apply this service to any pods which has the specific label
  type: ClusterIP                       # Specifies the service type i.e ClusterIP or NodePort

#######NODEPORT###############

kind: Service                             # Defines to create Service type Object
apiVersion: v1
metadata:
  name: demoservice
spec:
  ports:
    - port: 80                               # Containers port exposed
      targetPort: 80                     # Pods port
  selector:
    name: deployment                    # Apply this service to any pods which has the specific label
  type: ClusterIP  

  ##LABS###
  D:\kubernetes\object>kubectl get services
NAME          TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE
demoservice   NodePort    10.97.18.191   <none>        80:31706/TCP   5s
kubernetes    ClusterIP   10.96.0.1      <none>        443/TCP        3d20h

