/*1. It gives additional features to javascript on OOPS concept which makes code 
   more reliable.  //developed by microsoft
2. Install typescript: npm install - g typescript
3. Let & Const keyword: These keywords are available till JS ES5 engine
4. typescript have the capability to convert the ts into js.but when it converts 
   it makes sure our browser / protractor understands. 
5. diff between 'var' & 'let'*/

/*
 ------------    RULES ON TYPESCRIPT    -----------------
 1. WHEN WE DECLARE VARIABLE INSIDE CLASS, WE SHOULD NOT USE KEWORDS LIKE LET / VAR
    WE JUST NEED TO SPECIFY LIKE NAME : string , ID : number etc
 2. WHEN WE DECLARE FUNCTIONS INSIDE CLASS, WE DON'T NEED TO MENTION KEYWORD function 
    WE CAN DELCARE methodName(){}
 3. WE CAN'T DECLARE DUPLICATE VARIABLES INSIDE THE SAME PROJECT OF ANY .ts file. 
        
*/

/*
------------INSTALLATION---------------
Step 1 : Download and install Node js
node -v
npm -v
Step 2 : Install TypeScript
npm install -g typescript   //globally
tsc -v
Step 3 : Download IDE - Visual Studio Code
Step 4 : Add support for javascript, typescript and code runner
Step 5 : Create a new folder and open in VS Code
Step 6 : Create javascript (.js) and (.ts) files

To add TypeScript in a local folder
Step 1 : Download and install Node js
node -v
npm -v
Step 2 : Download IDE - Visual Studio Code
Step 3 : Create a new folder and open in VS Code
Step 4 : Open VS Code Terminal and run commands
npm init -y
npm install typescript 
Step 5 : Check typescript is installed locally     npx tsc -v

#TypeScriptBeginnerTutorials



*/
var s = 5;   //it has no restrictions

for (var i = 0; i < 9; i++) {
    setTimeout(function () {
        console.log(i);
    }, 100 * i);
}
//in o/p we see 5 , 5 ,5 ,5 5 which is not correct. The reason is there is no restriction of var 
//and as js is ascynchronous it is displaying 9 every time
//to remove this we will use 'let' keyword
for (let i = 0; i < 9; i++) {
    setTimeout(function () {
        console.log(i);
    }, 100 * i);
}
//o/p 0 ,1 , 2 , 3 , 4 , 5 ....8
//let keyword works on block level , it means when i carry the value 0 
//it doesnt know any other value. afer completing its action the  it goes for 2nd value
/*
6. We have to compile typescript all the time with 
   tsc filename.ts 
   It will generate a.js file with the same name
then -> node filename.js // will execute the script 

7. Const keyword: cant be reasigned
const b = 10;
   //b = 11;  compile error since it cant be reassigned*/

/*
       ---------------- DATA TYPES IN TYPESCRIPT ----------------------
       1. In javascript we can declare any variable as var x = 10;
          x = "Raktim" ; //this is a valid declartion 
          In Typescript we cant do that as it will throw type discrepancy error
        var x = 10;
        x = "raktim";  //compile error
       2. Valid datatype declaration in ts -> let x:string = "raktim";
                                              let c:number = 4;
       3. let flag:boolean = false;   
        it means we can define rule in typescripts
       
*/ 
   

/*
        ------------- ARRAYS -------------

        let list:Array<number> = [1,2,34,5];
        let dynamic:any  //is we want to retrieve something from UI we can use 'any'
        dynamic = 3;
        dynamic = "hello" ; //valid 



*/

/*
         --------------- TUPPLES -----------
           1. At times, there might be a need to store a collection of values 
           of varied types. Arrays will not serve this purpose. 
           TypeScript gives us a data type called tuple that helps to
            achieve such a purpose.

           2. let my_tupple = [12, "hello"];
              console.log(my_tupple[0]); 
       //push() & pop() operation
           let my_tupple = [12, "hello"];
           my_tupple.push(24);
           my_tupple.push(null);
           console.log(my_tupple[0]);

            console.log(my_tupple.length);
              // we can't pop null
              console.log(my_tupple.pop() +  ' popped from tupple');
*/


/*
            ------------  UNION ---------------
TypeScript 1.4 gives programs the ability to combine one or two types.
Union types are a powerful way to express a value that 
can be one of the several types. Two or more data types are
combined using the pipe symbol (|) to denote a Union Type

let union :string | string[];
union = "raktim";
console.log(union);

union = ["rahul" , "jackson" , "arijit"];
for(let c in union)
{
    console.log(union[c]);
}

//union type and function parameter
function disp(name: string | string[])
{
       if(typeof name == 'string')
       {
              console.log(name)
       } 
       
       else
       {
                for(var i = 0;i<name.length;i++)
                {
                          console.log(name[i]);
                }
       }
}

disp("raktim");
console.log("*************************")
disp(["ORACLE" , "CTS", "IBM" , "TCS"]);

*/

/*
       ------------- CLASSES -------------
       1. classes combines methods, properties , constructors 
       2. If we declare variables inside the class that teats as properties
       3. let username:String;  -> compile error since it will treat as vairables. 
       4. we can't declare variables inside class
      
    username:String ;
    password:String;
    SSN:number;

    getUserName()
    {
        return this.username;  //this refers to current class properties


    }

    setUserName(username:string)
    {
        this.username = username;
    }

    getssn()
    {
        return this.SSN;
    }
    
}
//we are creating object outside the class 

let obj = new classDemo();
obj.setUserName("raktim");
console.log(obj.getUserName());   

*/

/*
          --------------- CONSTRUCTORS ------------------
          //classes combines methods, properties , constructors 
class constructorTests
{ 
    username:String ;
    password:String;
    SSN:number;

    constructor(ssn:number)
    {
        this.SSN = ssn;
    }

    getUserName()
    {
        return this.username;  //this refers to current class properties


    }

    setUserName(username:string)
    {
        this.username = username;
    }

    getssn()
    {
        return this.SSN;
    }

    
}
let obj1 = new constructorTests(123);
obj1.setUserName("raktim");
console.log(obj1.getUserName());
console.log(obj1.getssn());

*/

/*
 ------------ EXPORT IMPORT CONCEPT IN JAVASCRIPT ----------------
 1. When we need to use any class, methods, variables into other classes
    we have to use export and import concept .
 2. example : 
    constructortest.ts 
    //classes combines methods, properties , constructors
export module App{ 
export  class constructorTests
{
    username:String ;
    password:String;
    SSN:number;

    constructor(ssn:number)
    {
        this.SSN = ssn;
    }

    getUserName()
    {
        return this.username;  //this refers to current class properties


    }

    setUserName(username:string)
    {
        this.username = username;
    }

    getssn()
    {
        return this.SSN;
    }

    
}
}
//if we see the above code, we are binding the entire class in a module. 
we are exporting this class so that , we can import in other class
Below is the 'access.ts' class from where we are creating object of the above class

import {App} from './constructorstest';
let cd = new App.constructorTests(123);
cd.setUserName("raktim");
console.log(cd.getUserName());
console.log(cd.getssn());  

//firstly we are importing the App module from the .ts file 
tsc access.ts
node access.js //output

*/

/*
  -----------------------  INTERFACES --------------------------
  It's a contract between client & service provider
  interface userDetails
  {
       username : String,
       password : String,
       SSN : Number
  }
  function validUser(bankingCustomer : userDetails)
  {
         console.log(bankingCustomer.username);  //123
         console.log(bankingCustomer.password);  //*** 
  }

  let hdfcUser =
  {
      "username" : 123,
      "password" : ***,
      "SSN"   : 12345
  }

  validUser(hdfcUser);   //at first it will check the service contract of validUser 
                          whether all attributes matches as per contract
Note: If we want to make any fiedls optional we will metion 
        interface userDetails
  {
       username : String,
       password : String,
       SSN ?: Number
  }
*/

/*

------------   OBJECTS ---------------------
let person1 = 
{ 
       firstname : "tom",
       lastname : "sarkar"
}

let invoke = function(obj:{firstname:string , lastname: string})
{
      console.log(obj.firstname);
}

invoke(person1);    //tom


*/

